<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>프로토타입 on Soyeon&#39;s Dev Log</title>
        <link>http://localhost:1313/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</link>
        <description>Recent content in 프로토타입 on Soyeon&#39;s Dev Log</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[커널아카데미] 백엔드 개발 부트캠프 13기 10주차(2)</title>
        <link>http://localhost:1313/posts/week10-2-retrospective/</link>
        <pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/week10-2-retrospective/</guid>
        <description>&lt;div style=&#34;margin: 0 40px;&#34;&gt;
&lt;h1 id=&#34;10주차-학습-정리---2&#34;&gt;10주차 학습 정리 - 2
&lt;/h1&gt;&lt;h2 id=&#34;이번-주-키워드&#34;&gt;이번 주 키워드
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript 기본 문법 (자료형, 호이스팅, 스코프)&lt;/li&gt;
&lt;li&gt;객체와 프로토타입 (Object &amp;amp; Prototype)&lt;/li&gt;
&lt;li&gt;DOM (Document Object Model) 조작&lt;/li&gt;
&lt;li&gt;이벤트(Event) 처리 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-javascript-기본-문법&#34;&gt;1. JavaScript 기본 문법
&lt;/h2&gt;&lt;p&gt;Java와 이름은 비슷하지만 동작 방식이 매우 다른 웹 브라우저를 제어하기 위한 핵심 언어&lt;/p&gt;
&lt;h3 id=&#34;자료형data-types--동적-타이핑&#34;&gt;자료형(Data Types) &amp;amp; 동적 타이핑
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동적 타입 언어&lt;/strong&gt;: 변수의 타입이 고정되어 있지 않고 할당되는 값에 따라 동적으로 결정됨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;기본형&lt;/strong&gt;: number, string, boolean, null, undefined&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파생형&lt;/strong&gt;: object (배열, 함수 포함)&lt;/li&gt;
&lt;li&gt;함수의 typeof 결과는 &amp;lsquo;function&amp;rsquo;으로 특별 취급&lt;/li&gt;
&lt;li&gt;타입 확인: &lt;code&gt;typeof&lt;/code&gt; 연산자 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;호이스팅hoisting&#34;&gt;호이스팅(Hoisting)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;변수/함수 선언이 범위의 최상단으로 끌어올려지는 현상&lt;/li&gt;
&lt;li&gt;함수 선언: 선언 전에 호출 가능&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; 변수: 선언 전에 접근하면 undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스코프scope&#34;&gt;스코프(Scope)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;전역 변수&lt;/strong&gt;: 함수 외부에서 선언, window 객체의 속성&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;지역 변수&lt;/strong&gt;: 함수 내부에서 &lt;code&gt;var&lt;/code&gt;로 선언, 함수 내에서만 유효&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ES5 기준&lt;/strong&gt;: 블록({}) 단위 스코프 X&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-객체와-프로토타입object--prototype&#34;&gt;2. 객체와 프로토타입(Object &amp;amp; Prototype)
&lt;/h2&gt;&lt;h3 id=&#34;객체-생성&#34;&gt;객체 생성
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;객체 리터럴&lt;/strong&gt;: &lt;code&gt;{}&lt;/code&gt;로 생성, 속성과 메서드 추가 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;생성자 함수&lt;/strong&gt;: &lt;code&gt;function Person(...)&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt; 키워드로 객체 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;this-키워드&#34;&gt;this 키워드
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;함수를 호출한 &lt;strong&gt;객체&lt;/strong&gt;를 가리킴(사용 위치에 따라 다름)
&lt;ul&gt;
&lt;li&gt;전역: window 객체&lt;/li&gt;
&lt;li&gt;메서드 내: 해당 객체&lt;/li&gt;
&lt;li&gt;생성자 함수 내: 생성될 객체&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt;로 this 명시적 변경 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;프로토타입prototype&#34;&gt;프로토타입(Prototype)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JS 상속의 핵심 메커니즘&lt;/li&gt;
&lt;li&gt;모든 객체는 생성자 함수의 prototype 객체를 가리키는 내부 링크(&lt;code&gt;__proto__&lt;/code&gt;)를 가짐&lt;/li&gt;
&lt;li&gt;생성자.prototype에 메서드를 추가 → 해당 생성자로 만들어진 모든 객체가 공유함(메모리 효율↑)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-domdocument-object-model-조작&#34;&gt;3. DOM(Document Object Model) 조작
&lt;/h2&gt;&lt;h3 id=&#34;dom이란&#34;&gt;DOM이란?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;브라우저가 HTML 문서를 읽어 트리 구조의 객체로 메모리에 생성한 것&lt;/li&gt;
&lt;li&gt;JS는 DOM을 통해 HTML 요소에 접근·조작 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;요소-선택&#34;&gt;요소 선택
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.getElementById(&#39;id&#39;)&lt;/code&gt; : id로 요소 선택(단일)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.querySelectorAll(&#39;selector&#39;)&lt;/code&gt; : CSS 선택자로 요소들 선택(복수)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;요소-조작-및-추가&#34;&gt;요소 조작 및 추가
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element.innerHTML&lt;/code&gt; : 요소 내부 HTML 변경&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.style.color&lt;/code&gt; : CSS 스타일 변경&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createElement(&#39;tag&#39;)&lt;/code&gt; : 새 요소 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentElement.appendChild(childElement)&lt;/code&gt; : 자식 요소를 부모에 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-이벤트event-처리&#34;&gt;4. 이벤트(Event) 처리
&lt;/h2&gt;&lt;h3 id=&#34;기본-개념&#34;&gt;기본 개념
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;이벤트: HTML 요소에서 발생하는 클릭, 마우스 오버 등의 사건&lt;/li&gt;
&lt;li&gt;이벤트 핸들러: 이벤트 발생 시 실행할 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;이벤트-모델&#34;&gt;이벤트 모델
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;기본&lt;/strong&gt;: &lt;code&gt;element.onclick = function() { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;표준&lt;/strong&gt;: &lt;code&gt;element.addEventListener(&#39;click&#39;, handler)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;여러 이벤트 핸들러 등록 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;이벤트-전파event-propagation&#34;&gt;이벤트 전파(Event Propagation)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이벤트 버블링&lt;/strong&gt;: 자식 요소에서 발생한 이벤트가 부모 요소로 올라가며 전파되는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
