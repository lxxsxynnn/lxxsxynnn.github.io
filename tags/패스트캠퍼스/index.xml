<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>패스트캠퍼스 on Soyeon&#39;s Dev Log</title>
        <link>http://localhost:1313/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4/</link>
        <description>Recent content in 패스트캠퍼스 on Soyeon&#39;s Dev Log</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Fri, 04 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[커널아카데미] 백엔드 개발 부트캠프 13기 3주차</title>
        <link>http://localhost:1313/posts/week3-retrospective/</link>
        <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/week3-retrospective/</guid>
        <description>&lt;h1 id=&#34;이번-주-키워드&#34;&gt;이번 주 키워드
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;예외 처리&lt;/strong&gt;, java.lang 패키지, 유용한 자바 클래스&lt;/p&gt;
&lt;h2 id=&#34;프로그램-오류와-예외&#34;&gt;프로그램 오류와 예외
&lt;/h2&gt;&lt;h3 id=&#34;프로그램-오류란&#34;&gt;프로그램 오류란?
&lt;/h3&gt;&lt;p&gt;프로그램 실행 중 오작동을 하거나 비정상적으로 종료되게 하는 원인
발생 시점에 따라 아래와 같이 구분됨&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;컴파일 에러&lt;/strong&gt;: 코드 작성 중 컴파일러가 잡아내는 문법 오류&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;런타임 에러&lt;/strong&gt;: 실행 중 발생하는 오류 (예: 0으로 나누기, 배열 인덱스 초과)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;논리적 에러&lt;/strong&gt;: 실행은 되지만, 의도와 다르게 동작하는 오류&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;에러와-예외&#34;&gt;에러와 예외
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;에러(Error)&lt;/strong&gt;: 프로그램 코드로 수습할 수 없는 심각한 오류 (예: OutOfMemoryError)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예외(Exception)&lt;/strong&gt;: 코드로 수습 가능한 비교적 덜 심각한 오류&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실행 중 발생하는 에러와 예외는 모두 &lt;code&gt;Throwable&lt;/code&gt;의 하위 클래스&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Throwable
 ├─ Error         // 시스템 오류, 복구 불가
 └─ Exception     // 예외 상황, 복구 가능
      ├─ RuntimeException (개발자 실수)
      └─ 기타 Exception (사용자 실수 등)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;예외-처리&#34;&gt;예외 처리
&lt;/h2&gt;&lt;h3 id=&#34;예외-처리란&#34;&gt;예외 처리란?
&lt;/h3&gt;&lt;p&gt;프로그램 실행 중 발생할 수 있는 예기치 못한 예외에 대비한 코드를 작성하는 것
예외 발생으로 인한 프로그램의 갑작스런 종료를 막고 &lt;strong&gt;정상적인 실행 상태&lt;/strong&gt;를 유지하기 위함&lt;/p&gt;
&lt;p&gt;예외 처리의 기본은 &lt;strong&gt;로깅&lt;/strong&gt;
(에러가 발생했을 때 상태와 원인을 기록하여 추후 원인 분석 및 유지보수에 활용)&lt;/p&gt;
&lt;h3 id=&#34;예외-처리-방법&#34;&gt;예외 처리 방법
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;try-catch&lt;/strong&gt;: 직접 예외를 처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;throws&lt;/strong&gt;: 예외를 호출자에게 전달&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예외 은폐&lt;/strong&gt;: 예외를 일부러 무시(권장하지 않음)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예외 되던지기(rethrow)&lt;/strong&gt;: catch에서 예외를 다시 던짐&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;try-catch-기본-구조&#34;&gt;try-catch 기본 구조
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 예외가 발생할 수 있는 코드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (ExceptionType e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 예외 처리 코드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 항상 실행되는 코드 (리소스 반환 등)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;예시&#34;&gt;예시
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Example&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 100;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 10; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (ArithmeticException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;multi-catch-java-7&#34;&gt;multi-catch (Java 7+)
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (IOException &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; SQLException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;조상-자손 관계 예외는 묶을 수 없음&lt;/li&gt;
&lt;li&gt;멀티 catch 블록 내에서는 공통 조상 타입의 멤버만 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예외-발생시키기-throw&#34;&gt;예외 발생시키기 (&lt;code&gt;throw&lt;/code&gt;)
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Exception(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;강제 예외 발생&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;예외의-종류&#34;&gt;예외의 종류
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checked Exception&lt;/strong&gt;: 컴파일러가 예외 처리를 강제 (예: IOException)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unchecked Exception&lt;/strong&gt;: RuntimeException 및 그 자손, 컴파일러가 체크하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;메서드에서-예외-선언-throws&#34;&gt;메서드에서 예외 선언 (&lt;code&gt;throws&lt;/code&gt;)
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readFile&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 파일 읽기 코드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;finally-블록&#34;&gt;finally 블록
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;예외 발생 여부와 관계없이 항상 실행&lt;/li&gt;
&lt;li&gt;주로 리소스 반환, 파일 닫기 등에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;try-with-resources-java-7&#34;&gt;try-with-resources (Java 7+)
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; (BufferedReader br &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileReader(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 파일 읽기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(IOException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AutoCloseable 구현 객체는 자동으로 close() 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예외-되던지기rethrow&#34;&gt;예외 되던지기(rethrow)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;catch 블록에서 예외를 다시 던져 호출자에게 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용자-정의-예외&#34;&gt;사용자 정의 예외
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Exception을 상속받아 직접 정의 가능&lt;/li&gt;
&lt;li&gt;기존 예외로 충분하다면 가급적 표준 예외 사용 권장&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예외-연결-chained-exception&#34;&gt;예외 연결 (Chained Exception)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;예외를 더 큰 단위로 묶어 처리 가능&lt;/li&gt;
&lt;li&gt;catch 블록을 단순화할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javalang-패키지-주요-클래스&#34;&gt;java.lang 패키지 주요 클래스
&lt;/h2&gt;&lt;h3 id=&#34;object-클래스&#34;&gt;Object 클래스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;모든 자바 클래스의 최상위 조상&lt;/li&gt;
&lt;li&gt;주요 메서드:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;equals(Object obj)&lt;/code&gt;: 객체 내용 비교 (오버라이딩 가능)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hashCode()&lt;/code&gt;: 해시코드 반환, 컬렉션에서 사용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clone()&lt;/code&gt;: 객체 복제 (Cloneable 구현 필요)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getClass()&lt;/code&gt;: 클래스 정보 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string-클래스&#34;&gt;String 클래스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Immutable&lt;/strong&gt;: 한 번 생성되면 변경 불가&lt;/li&gt;
&lt;li&gt;문자열 리터럴은 상수 풀에서 관리되어 같은 문자열은 같은 객체 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-메서드특징&#34;&gt;주요 메서드/특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trim()&lt;/code&gt;: 아스키 공백만 제거&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;: 유니코드 공백도 제거&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;, &lt;code&gt;StringJoiner&lt;/code&gt;: 구분자를 넣어 문자열 결합&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBytes(String charsetName)&lt;/code&gt;: 인코딩 변환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt;, &lt;code&gt;formatted()&lt;/code&gt;: 형식화된 문자열 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;: 기본형 → String 변환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse자료형()&lt;/code&gt;: String → 기본형 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stringbuffer와-stringbuilder&#34;&gt;StringBuffer와 StringBuilder
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt;: 스레드 안전, 동기화 지원&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuilder&lt;/strong&gt;: 동기화 미지원, 더 빠름&lt;/li&gt;
&lt;li&gt;equals() 오버라이딩 X → 내용 비교시 String으로 변환 후 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;math-클래스&#34;&gt;Math 클래스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;산술 연산 보조 메서드 제공 (&lt;code&gt;addExact&lt;/code&gt;, &lt;code&gt;subtractExact&lt;/code&gt; 등)&lt;/li&gt;
&lt;li&gt;오버플로우 체크 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StrictMath&lt;/strong&gt;: 플랫폼에 상관없이 일관된 결과 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;래퍼wrapper-클래스&#34;&gt;래퍼(Wrapper) 클래스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;기본형 값을 객체로 다룰 때 사용 (&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; 등)&lt;/li&gt;
&lt;li&gt;오토박싱/언박싱 지원&lt;/li&gt;
&lt;li&gt;-128~127 범위는 캐시로 재사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javautil-주요-클래스&#34;&gt;java.util 주요 클래스
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;클래스&lt;/th&gt;
          &lt;th&gt;용도&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Objects&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;null 체크, 객체 비교 등 유틸리티 메서드 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;난수 생성, seed 지정 가능&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;정규 표현식 지원, 텍스트 검색 및 치환&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Scanner&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;콘솔/파일 입력을 편리하게 받을 때 사용&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;StringTokenizer&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;문자열을 여러 구분자로 토큰화 (split과 차이)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;매우 큰 정수 연산 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;고정소수점 연산, 금융 계산 등 정밀한 소수점 연산에 사용&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;날짜와-시간&#34;&gt;날짜와 시간
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java 8 이전&lt;/strong&gt;: &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Calendar&lt;/code&gt; 클래스 사용 (불변 객체 아님, 복잡함)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java 8 이후&lt;/strong&gt;: &lt;code&gt;java.time&lt;/code&gt; 패키지 도입
&lt;ul&gt;
&lt;li&gt;불변 객체, 명확한 API 제공&lt;/li&gt;
&lt;li&gt;날짜, 시간, 기간, 포맷팅, 파싱 등 다양한 기능 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;날짜시간-계산의-기본&#34;&gt;날짜/시간 계산의 기본
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;시분초 → 초로 변환, 계산 후 다시 시분초로 변환&lt;/li&gt;
&lt;li&gt;년월일 → 일로 변환, 계산 후 다시 년월일로 변환&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;이번 주에는 자바의 예외 처리와 java.lang, java.util 패키지의 주요 클래스를 집중적으로 학습했다.&lt;/p&gt;
&lt;p&gt;프로젝트를 진행할 때마다 시간에 쫓겨 예외 처리나 테스트 코드 작성에 소홀했던 경험이 많았는데,
실무에서는 로깅과 예외 처리, 그리고 테스트 코드의 중요성을 다시 한 번 깨달았다.&lt;/p&gt;
&lt;p&gt;실제로 전 직장에서 개발팀에 로그를 요청해 업무에 활용한 경험이 있었고,
이 과정에서 로그가 안정적이고 유지보수하기 쉬운 코드를 작성하는 데 큰 도움이 될 뿐만 아니라,
서비스 운영 중 발생하는 문제를 신속하게 해결하는 데도 매우 유용하다는 점을 체감했다.
이러한 경험을 바탕으로 앞으로는 기능 구현뿐만 아니라 예외 처리와 테스트 코드 작성에도 더욱 신경 써야겠다고 다짐했다.&lt;/p&gt;
&lt;p&gt;앞으로는 꼼꼼하게 예외 처리와 테스트 코드를 챙기는 습관을 들여
더 신뢰받는 개발자가 되고자 한다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[커널아카데미] 백엔드 개발 부트캠프 13기 2주차</title>
        <link>http://localhost:1313/posts/week2-retrospective/</link>
        <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/week2-retrospective/</guid>
        <description>&lt;div style=&#34;margin: 0 40px;&#34;&gt;
&lt;h3 id=&#34;이번-주-키워드&#34;&gt;이번 주 키워드
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;객체 지향 설계&lt;/strong&gt;, &lt;strong&gt;클래스&lt;/strong&gt;, &lt;strong&gt;생성자&lt;/strong&gt;, &lt;strong&gt;추상클래스&lt;/strong&gt;, &lt;strong&gt;인터페이스&lt;/strong&gt;
&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;객체-지향이란&#34;&gt;객체 지향이란?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;객체 지향(Object-Oriented Programming, OOP)&lt;/strong&gt; 은 현실 세계를 컴퓨터 안에 구현하는 방식 &lt;br&gt;
즉, 우리가 보는 세상처럼 데이터와 그 데이터를 다루는 행위를 &lt;strong&gt;객체&lt;/strong&gt;라는 단위로 묶어서 표현하는 것&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실제 세계 분석, 관찰 → 설계(클래스 작성) → 객체 생성 → 객체 사용&lt;/p&gt;&lt;/blockquote&gt;
 &lt;br&gt;
&lt;p&gt;&lt;strong&gt;OOP의 목적&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 재사용성을 높이고&lt;br&gt;&lt;/li&gt;
&lt;li&gt;유지보수를 쉽게 하며&lt;br&gt;&lt;/li&gt;
&lt;li&gt;변화에 유연하게 대응할 수 있도록 함&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;객체지향의-4대-원칙&#34;&gt;객체지향의 4대 원칙
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캡슐화(Encapsulation)&lt;/strong&gt;&lt;br&gt;
데이터(변수)와 기능(메서드)을 하나로 묶고 외부에서 직접 접근하지 못하게 막음 &lt;br&gt;
→ 내부 구현은 숨기고, 인터페이스만 노출 &lt;br&gt;
→ 복잡도 감소, 유지보수 용이 &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;상속(Inheritance)&lt;/strong&gt;&lt;br&gt;
기존 클래스를 확장하여 새로운 클래스를 생성 가능 &lt;br&gt;
→ 코드 중복을 줄이고 공통 로직을 한 곳에서 관리&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;추상화(Abstraction)&lt;/strong&gt;&lt;br&gt;
공통적인 성질만 뽑아서 일반화한 개념 &lt;br&gt;
→ 불필요한 정보는 숨기고 중요한 정보만 표현 &lt;br&gt;
→ 예: 동물 → 고양이/강아지 (공통 행동: 먹다, 자다)&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;다형성(Polymorphism)&lt;/strong&gt;&lt;br&gt;
하나의 참조변수로 여러 객체 다루기&lt;br&gt;
다형적 매개변수&lt;br&gt;
하나의 배열에 여러 객체 저장&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;클래스&#34;&gt;클래스
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;정의&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;설계도&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;변수 + 메서드&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;사용자 정의 타입&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;클래스 간의 관계&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;상속 관계 (is-a)&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;자식 클래스가 부모 클래스를 확장 &lt;br&gt;
→ ex) &lt;code&gt;Dog extends Animal&lt;/code&gt;&lt;br&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;* 자바는 단일 상속만 지원&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;포함 관계 (has-a)&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;하나의 클래스가 다른 클래스를 필드로 가짐 &lt;br&gt;
→ ex) &lt;code&gt;Person has a Address&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;변수의 종류&lt;/strong&gt;&lt;br&gt;
선언된 위치에 따라&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스 영역: class variable, instance variable&lt;/li&gt;
&lt;li&gt;메서드 영역: local variable&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;생성자&#34;&gt;생성자
&lt;/h3&gt;&lt;p&gt;변수의 초기화&lt;br&gt;
초기화 순서는 cv → iv, 자동(기본값) → 간단(대입 =) → 복잡({} 블럭) 순&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;조건&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이름이 클래스와 동일&lt;/li&gt;
&lt;li&gt;반환타입 없음(void안씀)&lt;/li&gt;
&lt;li&gt;다른 생성자 호출은 반드시 첫줄에서&lt;/li&gt;
&lt;li&gt;다른 생성자 호출시 this() 사용&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;오버라이딩-vs-오버로딩&#34;&gt;오버라이딩 vs 오버로딩
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;오버라이딩(Overriding)&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;상속받은 메서드를 &lt;strong&gt;재정의&lt;/strong&gt;하는 것 &lt;br&gt;
→ 선언부는 같고, 구현부만 다르게 &lt;br&gt;
→ 접근제어자: 부모보다 좁으면 안됨 &lt;br&gt;
→ 반환 타입, 매개변수 동일해야 함&lt;br&gt;&lt;br&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;오버로딩(Overloading)&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;같은 이름의 메서드를 &lt;strong&gt;여러 개&lt;/strong&gt; 정의하는 것 &lt;br&gt;
→ 매개변수의 개수나 타입이 달라야 함&lt;br&gt;
→ 반환타입은 영향을 미치지 않음&lt;br&gt;&lt;br&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;super-키워드&#34;&gt;super 키워드
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;부모 클래스의 멤버(필드, 메서드)를 참조할 때 사용&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;super()&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;부모 생성자를 호출할 때 사용&lt;br&gt;&lt;/li&gt;
&lt;li&gt;생성자의 첫 줄에는 반드시 &lt;code&gt;this()&lt;/code&gt; 또는 &lt;code&gt;super()&lt;/code&gt; 중 하나가 있어야 하며,&lt;br&gt;
없으면 컴파일러가 &lt;code&gt;super()&lt;/code&gt;를 자동 삽입함&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;다형성과-형변환&#34;&gt;다형성과 형변환
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;부모 타입으로 자식 객체를 참조할 수 있음 → 확장성과 유연성 확보&lt;br&gt;&lt;/li&gt;
&lt;li&gt;하지만 자식 타입으로 다시 형변환하려면 &lt;code&gt;instanceof&lt;/code&gt;로 확인해야 함&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (animal &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; Dog) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Dog dog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Dog) animal;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dog.&lt;span style=&#34;color:#a6e22e&#34;&gt;bark&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;형변환을 통해 참조 변수(리모컨)를 바꿔 객체가 가진 메서드 범위를 조절&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;추상-클래스-abstract-class&#34;&gt;추상 클래스 (abstract class)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;미완성 설계도 → 객체 생성 불가&lt;br&gt;&lt;/li&gt;
&lt;li&gt;공통 부분은 구현하고, 바뀌는 부분만 추상 메서드로 정의&lt;br&gt;&lt;/li&gt;
&lt;li&gt;상속받은 클래스가 추상 메서드를 반드시 구현해야 함&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;인터페이스-interface&#34;&gt;인터페이스 (interface)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;모든 메서드는 public abstract, 모든 변수는 public static final&lt;br&gt;
→ 생략해도 컴파일러가 자동 추가&lt;br&gt;
→ interface의 메서드를 오버라이딩하면 public을 반드시 붙여야 함&lt;/li&gt;
&lt;li&gt;다중 구현 가능&lt;br&gt;&lt;/li&gt;
&lt;li&gt;서로 관계없는 클래스에도 공통 기능 강제 가능&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+) 추상클래스는 iv를 가질 수 있지만 인터페이스는 iv를 가질 수 없음&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;+) JDK 1.8 이후&lt;br&gt;
default, static 메서드 추가 가능&lt;br&gt;
→ 기존 구현 클래스에 영향 주지 않기 위해 도입&lt;br&gt;
→ default 메서드는 오버라이딩 가능&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sound&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 추상 메서드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sleeping...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;예전에 면접을 봤을 때 객체지향에 대한 질문을 받고 제대로 답변하지 못했던 적이 있었는데&lt;br&gt;
여러 번 반복을 하고 강사님께서 강조하신 부분을 외우려고 노력을 하고 나니&lt;br&gt;
이제 객체지향이 뭔지, 어떤 특징을 가지고 있는지 등에 대해 확실히 정리가 된 것 같다.&lt;br&gt;
욕심 부리지 않고 조금씩 이론적인 부분에 대해 정리하고 설명할 수 있는 능력을 길러야겠다!
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>[커널아카데미] 백엔드 개발 부트캠프 13기 1주차]</title>
        <link>http://localhost:1313/posts/week1-retrospective/</link>
        <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/week1-retrospective/</guid>
        <description>&lt;div style=&#34;margin: 0 40px;&#34;&gt;
&lt;img src=&#34;http://localhost:1313/images/IMG_5618.jpeg&#34; alt=&#34;alt text&#34; style=&#34;width:50%;&#34; /&gt;
&lt;h3 id=&#34;이번-주-키워드&#34;&gt;이번 주 키워드
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;변수&lt;/strong&gt;, &lt;strong&gt;설계&lt;/strong&gt;
&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;변수란&#34;&gt;변수란?
&lt;/h3&gt;&lt;p&gt;자바에서 변수는 &lt;strong&gt;타입 + 이름&lt;/strong&gt;으로 구성&lt;br&gt;
이 변수를 통해 &lt;strong&gt;쓰기(= 연산자)&lt;/strong&gt;, &lt;strong&gt;읽기(변수명)&lt;/strong&gt; 등의 작업을 수행 가능&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;변수를 사용하는 이유?&lt;/strong&gt;&lt;br&gt;
→ &lt;strong&gt;컴파일러가 코드를 분석하고 오류를 사전에 잡을 수 있도록 하기 위해서&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;컴파일러는 다음과 같은 작업을 수행:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문법 체크&lt;/li&gt;
&lt;li&gt;최적화&lt;/li&gt;
&lt;li&gt;번역 (&lt;code&gt;.java&lt;/code&gt; → &lt;code&gt;.class&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;📌 즉, &lt;strong&gt;코드가 완벽하지 않아도&lt;/strong&gt; 컴파일러가 이를 어느 정도 보완해줌&lt;/p&gt;&lt;/blockquote&gt;
&lt;br&gt;
&lt;h3 id=&#34;변수의-종류&#34;&gt;변수의 종류
&lt;/h3&gt;&lt;p&gt;자바의 변수는 크게 두 가지:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;기본형(primitive)&lt;/strong&gt;: 하나의 요소&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;참조형(reference)&lt;/strong&gt;: 여러 개의 요소(집합)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;참조형은 0~n개의 요소를 담는 &lt;strong&gt;집합&lt;/strong&gt;이며,&lt;br&gt;
이 집합을 만들기 위해서는 기준을 가지고 &lt;strong&gt;그룹화&lt;/strong&gt;를 수행&lt;br&gt;
➡️ 이것이 바로 &lt;strong&gt;설계&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;설계란&#34;&gt;설계란?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;관련 있는 것끼리 하나의 집합으로 묶고 집합들 간의 관계를 정의&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;설계를 하면 좋은 점:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복잡도가 낮아지고&lt;/li&gt;
&lt;li&gt;관리가 쉬워지며&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;더 복잡한 프로그램을 구현할 수 있게 됨&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;연산&#34;&gt;연산
&lt;/h3&gt;&lt;p&gt;연산이란 &lt;strong&gt;데이터를 계산하는 것&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;같은 타입끼리만 연산 가능&lt;/li&gt;
&lt;li&gt;반드시 &lt;strong&gt;결과를 반환&lt;/strong&gt;해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;연산자에서 중요한 3요소:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;우선순위&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;결합법칙&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;산술 변환&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;둘 중 큰 타입으로 자동 변환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;보다 작은 타입끼리 연산 시 → &lt;strong&gt;&lt;code&gt;int&lt;/code&gt;로 변환 후 연산&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;연습문제-정리&#34;&gt;연습문제 정리
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;long&lt;/code&gt;형 변수에 정수값 저장 시 &lt;code&gt;L&lt;/code&gt;을 붙이지 않으면 기본적으로 &lt;code&gt;int&lt;/code&gt;로 인식&lt;br&gt;
→ &lt;code&gt;int&lt;/code&gt; 범위 초과 시 컴파일 에러 발생&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;+&#39;&lt;/code&gt; 연산자는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;둘 다 숫자 → &lt;strong&gt;덧셈&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;하나라도 String → &lt;strong&gt;문자열 이어붙이기&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char + char&lt;/code&gt; / &lt;code&gt;char + 숫자&lt;/code&gt; → &lt;strong&gt;int 반환&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;단, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; 같은 증감 연산자는 &lt;strong&gt;형변환 없이&lt;/strong&gt; &lt;code&gt;char&lt;/code&gt;로 반환&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바는 C처럼 &lt;code&gt;0 = false&lt;/code&gt;, &lt;code&gt;1 = true&lt;/code&gt;를 인정하지 않음&lt;br&gt;
→ &lt;code&gt;boolean&lt;/code&gt;에는 반드시 &lt;strong&gt;&lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt; 를 사용해야 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;는 요소형 → 반드시 문자를 지정해야 함&lt;br&gt;
→ &lt;code&gt;&#39;&#39;&lt;/code&gt; (빈 문자 리터럴) 사용 불가&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;자바에서의-var&#34;&gt;자바에서의 &lt;code&gt;var&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Java 10부터 도입된 문법으로, &lt;strong&gt;로컬 변수의 타입을 컴파일러가 자동 추론&lt;/strong&gt;&lt;br&gt;
(컴파일 타임에 정적으로 결정, 런타임에 동적으로 바뀌지 않음)&lt;br&gt;
적절한 상황에 사용하면 &lt;strong&gt;코드의 가독성과 간결성&lt;/strong&gt;이 좋아짐&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;1-타입이-너무-길어서-코드가-지저분할-때&#34;&gt;1. 타입이 너무 길어서 코드가 지저분할 때
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// before&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// after&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-우측-표현식으로-타입이-분명히-드러날-때&#34;&gt;2. 우측 표현식으로 타입이 분명히 드러날 때
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Soyeon&amp;#34;&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 123;          &lt;span style=&#34;color:#75715e&#34;&gt;// int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(1, 2); &lt;span style=&#34;color:#75715e&#34;&gt;// List&amp;lt;Integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-for-each-루프에서-반복-변수&#34;&gt;3. for-each 루프에서 반복 변수
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; item : items) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;📌 주의:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var는 명시적인 타입 지정이 아닌 추론이기 때문에, 복잡한 표현식에서는 오히려 가독성을 해칠 수 있음&lt;/li&gt;
&lt;li&gt;클래스 필드, 메서드 매개변수, 리턴 타입에는 사용할 수 없음 (오직 로컬 변수에만 사용 가능)
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;→ 사람이 읽을 수 있을 만큼만 추론을 맡기고 그렇지 않으면 명시적으로 타입을 작성하자!&lt;/strong&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;java 기초 부분은 어느 정도 안다고 생각했는데 연습문제를 풀어보니&lt;br&gt;
컴파일러가 있어서 아무 생각 없이 코드를 작성하던 부분이 많았다는 것을 느꼈다.&lt;br&gt;
예습 복습을 하면서 기초를 탄탄히 다져야겠다!
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
