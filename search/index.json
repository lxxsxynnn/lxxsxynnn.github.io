[{"content":" 이번 주 키워드 객체 지향, 설계 = 집합 + 관계, 상속과 포함, 다형성, 추상 클래스, 인터페이스 객체 지향이란? 객체 지향(Object-Oriented Programming, OOP) 은 현실 세계를 컴퓨터 안에 구현하는 방식이다.\n즉, 우리가 보는 세상처럼 데이터와 그 데이터를 다루는 행위를 객체라는 단위로 묶어서 표현하는 것이다.\n현실 세계 → 분석 → 설계 → 객체로 모델링 → 코드로 구현\nOOP의 목적\n코드 재사용성을 높이고 유지보수를 쉽게 하며 변화에 유연하게 대응할 수 있도록 한다 객체지향의 4대 원칙 캡슐화(Encapsulation)\n데이터(변수)와 기능(메서드)을 하나로 묶고 외부에서 직접 접근하지 못하게 막는다.\n→ 내부 구현은 숨기고, 인터페이스만 노출\n→ 복잡도 감소, 유지보수 용이\n상속(Inheritance)\n기존 클래스를 확장하여 새로운 클래스를 만들 수 있다.\n→ 코드 중복을 줄이고 공통 로직을 한 곳에서 관리\n추상화(Abstraction)\n공통적인 성질만 뽑아서 일반화한 개념이다.\n→ 불필요한 정보는 숨기고 중요한 정보만 표현한다\n→ 예: 동물 → 고양이/강아지 (공통 행동: 먹다, 자다)\n다형성(Polymorphism)\n동일한 인터페이스로 다양한 구현을 사용할 수 있다.\n→ 상속 구조에서 부모 타입으로 자식 객체를 다룰 수 있음\n클래스 설계 = 집합 + 관계 클래스 설계는 단순한 코드 작성이 아니라, 프로그램의 구조를 짜는 중요한 일이다.\n이때 중요한 개념은 **집합(묶기)**과 **관계(연결)**이다.\n집합: 관련 있는 변수와 메서드를 한 클래스로 묶는다\n→ 예: 학생 이름, 나이, 학번 → Student 클래스\n관계\n상속 관계 (is-a) 자식 클래스가 부모 클래스를 확장한다\n→ ex. Dog extends Animal 포함 관계 (has-a) 하나의 클래스가 다른 클래스를 필드로 가진다\n→ ex. Person has a Address 자바는 단일 상속만 지원 다중 상속은 메서드 충돌 문제로 인해 자바에서 금지되어 있음 대신 상속 + 포함을 병행하여 해결 → 비중 높은 클래스는 상속, 나머지는 포함 이 덕분에 클래스 간의 관계가 명확해지고 코드의 신뢰성이 높아짐\n오버라이딩 vs 오버로딩 오버라이딩(Overriding) 상속받은 메서드를 재정의하는 것\n→ 선언부는 같고, 구현부만 다르게\n→ 접근제어자: 부모보다 좁으면 안됨\n→ 반환 타입, 매개변수 동일해야 함 오버로딩(Overloading) 같은 이름의 메서드를 여러 개 정의하는 것\n→ 매개변수의 개수나 타입이 달라야 함 super 키워드 super는 부모 클래스의 멤버(필드, 메서드)를 참조할 때 사용 super()는 부모 생성자를 호출할 때 사용 생성자의 첫 줄에는 반드시 this() 또는 super() 중 하나가 있어야 하며, 없으면 컴파일러가 super()를 자동 삽입함 다형성과 형변환 부모 타입으로 자식 객체를 참조할 수 있음 → 확장성과 유연성 확보 하지만 자식 타입으로 다시 형변환하려면 instanceof로 확인해야 함 if (animal instanceof Dog) { Dog dog = (Dog) animal; dog.bark(); } 형변환을 통해 참조 변수(리모컨)를 바꿔 객체가 가진 메서드 범위를 조절\n추상 클래스 (abstract class) 미완성 설계도 → 객체 생성 불가\n공통 부분은 구현하고, 바뀌는 부분만 추상 메서드로 정의\n상속받은 클래스가 추상 메서드를 반드시 구현해야 함\n인터페이스 (interface) 모든 메서드는 public abstract, 모든 변수는 public static final → 생략해도 컴파일러가 자동 추가\n다중 구현 가능\n서로 관계없는 클래스에도 공통 기능 강제 가능\nJDK 1.8 이후\ndefault, static 메서드 추가 가능 → 기존 구현 클래스에 영향 주지 않기 위해 도입 → default 메서드는 오버라이딩 가능\ninterface Animal { void sound(); // 추상 메서드\ndefault void sleep() { System.out.println(\u0026quot;Sleeping...\u0026quot;); } }\n마무리 이번 주는 자바에서 객체지향 프로그래밍의 근본 개념들을 체계적으로 정리했다. 클래스는 단순한 코드 묶음이 아니라 구조 설계의 핵심이라는 걸 느꼈다.\n클래스 설계할 때는 집합과 관계에 집중\n상속과 포함의 역할과 차이를 명확히 이해\n추상 클래스와 인터페이스는 추상화의 수단\n다형성은 유지보수성과 확장성을 보장해주는 중요한 기술\n다음 주에는 이 개념들을 활용한 실습을 통해, 이론을 더 확실히 내 것으로 만들 예정이다.\n","date":"2025-06-27T00:00:00Z","permalink":"http://localhost:1313/posts/week2-retrospective/","title":"[커널아카데미] 백엔드 개발 부트캠프 13기 2주차"},{"content":" 이번 주 키워드 변수, 설계 변수란? 자바에서 변수는 타입 + 이름으로 구성\n이 변수를 통해 쓰기(= 연산자), 읽기(변수명) 등의 작업을 수행 가능\n변수를 사용하는 이유?\n→ 컴파일러가 코드를 분석하고 오류를 사전에 잡을 수 있도록 하기 위해서\n컴파일러는 다음과 같은 작업을 수행:\n문법 체크 최적화 번역 (.java → .class) 📌 즉, 코드가 완벽하지 않아도 컴파일러가 이를 어느 정도 보완해줌\n변수의 종류 자바의 변수는 크게 두 가지:\n기본형(primitive): 하나의 요소 참조형(reference): 여러 개의 요소(집합) 참조형은 0~n개의 요소를 담는 집합이며,\n이 집합을 만들기 위해서는 기준을 가지고 그룹화를 수행\n➡️ 이것이 바로 설계\n설계란? 관련 있는 것끼리 하나의 집합으로 묶고 집합들 간의 관계를 정의\n설계를 하면 좋은 점:\n복잡도가 낮아지고 관리가 쉬워지며 더 복잡한 프로그램을 구현할 수 있게 됨 연산 연산이란 데이터를 계산하는 것\n같은 타입끼리만 연산 가능 반드시 결과를 반환해야 함 연산자에서 중요한 3요소:\n우선순위 결합법칙 산술 변환 둘 중 큰 타입으로 자동 변환 int보다 작은 타입끼리 연산 시 → int로 변환 후 연산 연습문제 정리 long형 변수에 정수값 저장 시 L을 붙이지 않으면 기본적으로 int로 인식\n→ int 범위 초과 시 컴파일 에러 발생\n'+' 연산자는\n둘 다 숫자 → 덧셈 하나라도 String → 문자열 이어붙이기 char + char / char + 숫자 → int 반환 단, ++, -- 같은 증감 연산자는 형변환 없이 char로 반환\n자바는 C처럼 0 = false, 1 = true를 인정하지 않음\n→ boolean에는 반드시 true / false 를 사용해야 함\nchar는 요소형 → 반드시 문자를 지정해야 함\n→ '' (빈 문자 리터럴) 사용 불가\n자바에서의 var Java 10부터 도입된 문법으로, 로컬 변수의 타입을 컴파일러가 자동 추론\n(컴파일 타임에 정적으로 결정, 런타임에 동적으로 바뀌지 않음)\n적절한 상황에 사용하면 코드의 가독성과 간결성이 좋아짐\n1. 타입이 너무 길어서 코드가 지저분할 때 // before Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); // after var map = new HashMap\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt;(); 2. 우측 표현식으로 타입이 분명히 드러날 때 var name = \u0026#34;Soyeon\u0026#34;; // String var count = 123; // int var list = List.of(1, 2); // List\u0026lt;Integer\u0026gt; 3. for-each 루프에서 반복 변수 for (var item : items) { System.out.println(item); } 📌 주의:\nvar는 명시적인 타입 지정이 아닌 추론이기 때문에, 복잡한 표현식에서는 오히려 가독성을 해칠 수 있음 클래스 필드, 메서드 매개변수, 리턴 타입에는 사용할 수 없음 (오직 로컬 변수에만 사용 가능) → 사람이 읽을 수 있을 만큼만 추론을 맡기고 그렇지 않으면 명시적으로 타입을 작성하자! 마무리 java 기초 부분은 어느 정도 안다고 생각했는데 연습문제를 풀어보니\n컴파일러가 있어서 아무 생각 없이 코드를 작성하던 부분이 많았다는 것을 느꼈다.\n예습 복습을 하면서 기초를 탄탄히 다져야겠다! ","date":"2025-06-23T00:00:00Z","permalink":"http://localhost:1313/posts/week1-retrospective/","title":"[커널아카데미] 백엔드 개발 부트캠프 13기 1주차]"}]